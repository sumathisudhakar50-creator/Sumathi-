<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript Code Examples</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7f9;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: linear-gradient(135deg, #2c3e50, #4a69bd);
            color: white;
            padding: 30px 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 20px;
        }
        
        .category-filter {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 10px;
            margin: 20px 0;
        }
        
        .category-btn {
            padding: 8px 16px;
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .category-btn:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }
        
        .category-btn.active {
            background-color: white;
            color: #4a69bd;
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 25px;
            margin-top: 30px;
        }
        
        .card {
            background-color: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card-header {
            background-color: #4a69bd;
            color: white;
            padding: 15px 20px;
        }
        
        .card-body {
            padding: 20px;
        }
        
        .code-example {
            background-color: #2c3e50;
            color: #f8f8f2;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            position: relative;
        }
        
        .explanation {
            margin-top: 15px;
            color: #555;
        }
        
        .demo-area {
            background-color: #f8f9fa;
            padding: 15px;
            border-left: 4px solid #4a69bd;
            margin-top: 15px;
        }
        
        button {
            background-color: #4a69bd;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #3c5aa8;
        }
        
        input, select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin: 5px 0;
            width: 100%;
        }
        
        footer {
            text-align: center;
            margin-top: 50px;
            padding: 20px;
            color: #777;
        }
        
        .output {
            margin-top: 10px;
            padding: 10px;
            background-color: #eee;
            border-radius: 4px;
            min-height: 20px;
        }
        
        @media (max-width: 768px) {
            .grid {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2.2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>JavaScript Code Examples</h1>
            <p class="subtitle">Interactive examples of common JavaScript patterns and functions</p>
            
            <div class="category-filter">
                <button class="category-btn active">All</button>
                <button class="category-btn">DOM Manipulation</button>
                <button class="category-btn">Functions</button>
                <button class="category-btn">Events</button>
                <button class="category-btn">Async</button>
            </div>
        </header>
        
        <div class="grid">
            <!-- Variables and Data Types -->
            <div class="card">
                <div class="card-header">
                    <h2>Variables & Data Types</h2>
                </div>
                <div class="card-body">
                    <div class="code-example">
// Variable declarations<br>
let message = "Hello, World!";<br>
const PI = 3.14159;<br>
var count = 10;<br>
<br>
// Different data types<br>
let isActive = true; // boolean<br>
let score = 100; // number<br>
let name = "Alice"; // string<br>
let person = { firstName: "John", age: 30 }; // object<br>
let numbers = [1, 2, 3, 4, 5]; // array<br>
let nothing = null; // null<br>
                    </div>
                    <div class="explanation">
                        JavaScript variables can be declared using <code>let</code>, <code>const</code>, or <code>var</code>.
                        JavaScript has dynamic types - the same variable can hold different data types.
                    </div>
                    <div class="demo-area">
                        <h4>Try it:</h4>
                        <button onclick="showVariables()">Show Variables</button>
                        <div class="output" id="variablesOutput"></div>
                    </div>
                </div>
            </div>
            
            <!-- Functions -->
            <div class="card">
                <div class="card-header">
                    <h2>Functions</h2>
                </div>
                <div class="card-body">
                    <div class="code-example">
// Function declaration<br>
function multiply(a, b) {<br>
  return a * b;<br>
}<br>
<br>
// Function expression<br>
const greet = function(name) {<br>
  return `Hello, ${name}!`;<br>
};<br>
<br>
// Arrow function<br>
const square = (x) => x * x;<br>
<br>
// Using default parameters<br>
function power(base, exponent = 2) {<br>
  return base ** exponent;<br>
}
                    </div>
                    <div class="explanation">
                        Functions are blocks of code designed to perform a particular task. They can be declared in multiple ways and can accept parameters.
                    </div>
                    <div class="demo-area">
                        <h4>Try it:</h4>
                        <input type="number" id="num1" placeholder="Enter a number" value="5">
                        <input type="number" id="num2" placeholder="Enter another number" value="3">
                        <button onclick="calculate()">Calculate Product & Square</button>
                        <div class="output" id="functionOutput"></div>
                    </div>
                </div>
            </div>
            
            <!-- DOM Manipulation -->
            <div class="card">
                <div class="card-header">
                    <h2>DOM Manipulation</h2>
                </div>
                <div class="card-body">
                    <div class="code-example">
// Changing text content<br>
document.getElementById('demo').textContent = 'Hello World!';<br>
<br>
// Changing HTML content<br>
document.querySelector('.content').innerHTML = '&lt;strong&gt;Bold text&lt;/strong&gt;';<br>
<br>
// Changing styles<br>
document.body.style.backgroundColor = 'lightblue';<br>
<br>
// Creating new elements<br>
const newDiv = document.createElement('div');<br>
newDiv.textContent = 'I am a new div!';<br>
document.body.appendChild(newDiv);<br>
<br>
// Handling events<br>
button.addEventListener('click', function() {<br>
  alert('Button clicked!');<br>
});
                    </div>
                    <div class="explanation">
                        The Document Object Model (DOM) represents the page structure. JavaScript can manipulate the DOM to change content, styles, and structure.
                    </div>
                    <div class="demo-area">
                        <h4>Try it:</h4>
                        <button onclick="changeText()">Change Text</button>
                        <button onclick="changeColor()">Change Color</button>
                        <button onclick="addElement()">Add Element</button>
                        <div class="output" id="domOutput">Original content</div>
                    </div>
                </div>
            </div>
            
            <!-- Event Handling -->
            <div class="card">
                <div class="card-header">
                    <h2>Event Handling</h2>
                </div>
                <div class="card-body">
                    <div class="code-example">
// Inline event handling<br>
&lt;button onclick="handleClick()"&gt;Click me&lt;/button&gt;<br>
<br>
// Using addEventListener<br>
const button = document.getElementById('myButton');<br>
button.addEventListener('click', function(event) {<br>
  console.log('Button clicked!');<br>
  console.log(event);<br>
});<br>
<br>
// Event delegation<br>
document.getElementById('list').addEventListener('click', function(e) {<br>
  if (e.target.tagName === 'LI') {<br>
    console.log('List item clicked:', e.target.textContent);<br>
  }<br>
});<br>
<br>
// Preventing default behavior<br>
form.addEventListener('submit', function(e) {<br>
  e.preventDefault();<br>
  // Handle form submission manually<br>
});
                    </div>
                    <div class="explanation">
                        JavaScript can respond to user interactions through event handlers. Events can be attached directly in HTML or using JavaScript.
                    </div>
                    <div class="demo-area">
                        <h4>Try it:</h4>
                        <button id="eventButton">Click Me</button>
                        <div class="output" id="eventOutput">Event results will appear here</div>
                    </div>
                </div>
            </div>
            
            <!-- Arrays -->
            <div class="card">
                <div class="card-header">
                    <h2>Array Methods</h2>
                </div>
                <div class="card-body">
                    <div class="code-example">
const fruits = ['Apple', 'Banana', 'Cherry'];<br>
<br>
// Adding/removing elements<br>
fruits.push('Orange'); // adds to end<br>
fruits.pop(); // removes from end<br>
fruits.unshift('Strawberry'); // adds to beginning<br>
fruits.shift(); // removes from beginning<br>
<br>
// Iterating over arrays<br>
fruits.forEach(function(fruit, index) {<br>
  console.log(index, fruit);<br>
});<br>
<br>
// Mapping array to new array<br>
const lengths = fruits.map(fruit => fruit.length);<br>
<br>
// Filtering array<br>
const longFruits = fruits.filter(fruit => fruit.length > 5);<br>
<br>
// Finding elements<br>
const found = fruits.find(fruit => fruit.startsWith('B'));
                    </div>
                    <div class="explanation">
                        Arrays are used to store multiple values in a single variable. JavaScript provides many built-in methods to work with arrays.
                    </div>
                    <div class="demo-area">
                        <h4>Try it:</h4>
                        <button onclick="showArrayMethods()">Demo Array Methods</button>
                        <div class="output" id="arrayOutput"></div>
                    </div>
                </div>
            </div>
            
            <!-- Async/Await -->
            <div class="card">
                <div class="card-header">
                    <h2>Async/Await</h2>
                </div>
                <div class="card-body">
                    <div class="code-example">
// Using Promises<br>
fetch('https://api.example.com/data')<br>
  .then(response => response.json())<br>
  .then(data => console.log(data))<br>
  .catch(error => console.error('Error:', error));<br>
<br>
// Using Async/Await<br>
async function getData() {<br>
  try {<br>
    const response = await fetch('https://api.example.com/data');<br>
    const data = await response.json();<br>
    console.log(data);<br>
    return data;<br>
  } catch (error) {<br>
    console.error('Error:', error);<br>
  }<br>
}<br>
<br>
// Using with arrow functions<br>
const fetchData = async () => {<br>
  const response = await fetch('https://api.example.com/data');<br>
  return await response.json();<br>
};
                    </div>
                    <div class="explanation">
                        Async/await makes working with asynchronous code easier and more readable. It's built on top of Promises.
                    </div>
                    <div class="demo-area">
                        <h4>Try it:</h4>
                        <button onclick="simulateAsync()">Simulate Async Call</button>
                        <div class="output" id="asyncOutput"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <footer>
            <p>JavaScript Code Examples &copy; 2023</p>
        </footer>
    </div>

    <script>
        // Variables demo
        function showVariables() {
            let message = "Hello, World!";
            const PI = 3.14159;
            let isActive = true;
            let score = 100;
            let person = { firstName: "John", age: 30 };
            let numbers = [1, 2, 3, 4, 5];
            
            let output = `
                message: ${message}<br>
                PI: ${PI}<br>
                isActive: ${isActive}<br>
                score: ${score}<br>
                person: ${JSON.stringify(person)}<br>
                numbers: ${numbers.join(', ')}
            `;
            
            document.getElementById('variablesOutput').innerHTML = output;
        }
        
        // Functions demo
        function calculate() {
            const num1 = parseInt(document.getElementById('num1').value) || 0;
            const num2 = parseInt(document.getElementById('num2').value) || 0;
            
            // Using the functions defined in the code example
            const product = multiply(num1, num2);
            const squared = square(num1);
            const greeting = greet("User");
            
            document.getElementById('functionOutput').innerHTML = `
                ${greeting}<br>
                ${num1} * ${num2} = ${product}<br>
                ${num1} squared = ${squared}
            `;
        }
        
        function multiply(a, b) {
            return a * b;
        }
        
        const greet = function(name) {
            return `Hello, ${name}!`;
        };
        
        const square = (x) => x * x;
        
        // DOM Manipulation demo
        function changeText() {
            const output = document.getElementById('domOutput');
            output.innerHTML = '<strong>Text changed!</strong> ' + new Date().toLocaleTimeString();
        }
        
        function changeColor() {
            const output = document.getElementById('domOutput');
            const colors = ['#ffcccc', '#ccffcc', '#ccccff', '#ffffcc', '#ccffff'];
            const randomColor = colors[Math.floor(Math.random() * colors.length)];
            output.style.backgroundColor = randomColor;
        }
        
        function addElement() {
            const output = document.getElementById('domOutput');
            const newElement = document.createElement('p');
            newElement.textContent = 'New element added at ' + new Date().toLocaleTimeString();
            output.appendChild(newElement);
        }
        
        // Event handling demo
        document.getElementById('eventButton').addEventListener('click', function() {
            const output = document.getElementById('eventOutput');
            output.innerHTML = `Button clicked at ${new Date().toLocaleTimeString()}`;
            
            // Change button text temporarily
            this.textContent = 'Clicked!';
            setTimeout(() => {
                this.textContent = 'Click Me';
            }, 1000);
        });
        
        // Array methods demo
        function showArrayMethods() {
            let fruits = ['Apple', 'Banana', 'Cherry'];
            
            // Demonstrate various array methods
            fruits.push('Orange');
            const removed = fruits.pop();
            const lengths = fruits.map(fruit => fruit.length);
            const longFruits = fruits.filter(fruit => fruit.length > 5);
            const found = fruits.find(fruit => fruit.startsWith('B'));
            
            let output = `
                Original array: ${['Apple', 'Banana', 'Cherry'].join(', ')}<br>
                After push('Orange'): ${fruits.join(', ')}<br>
                After pop(): ${fruits.join(', ')} (removed: ${removed})<br>
                Lengths: ${lengths.join(', ')}<br>
                Fruits with more than 5 letters: ${longFruits.join(', ')}<br>
                Fruit starting with 'B': ${found}
            `;
            
            document.getElementById('arrayOutput').innerHTML = output;
        }
        
        // Async/await demo
        function simulateAsync() {
            const output = document.getElementById('asyncOutput');
            output
